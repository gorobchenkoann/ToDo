// ToDo Class
class Todo {
  constructor(title, comment) {
    this.title = title;
    this.comment = comment;
  }
}

// UI Class
class UI {
  static DisplayTodos() {
    const storedTodos = [
      {
        title: '1',
        comment: '123'
      },
      {
        title: '2'
      }
    ];
    
    const todos = storedTodos;
    todos.forEach(todo => UI.ShowTodo(todo));    
  }
  
  static ShowTodo(todo) {
    let list = document.querySelector('.todos'); 
    let card = document.createElement('div');
    
    card.className = 'card mb-3';
    
    if (todo.comment !== undefined && todo.comment !== '') {
      card.innerHTML = `
        <div class="card-header full d-flex justify-content-between align-items-center">
          <span>
            ${todo.title}            
          </span>
          <i class="fas fa-caret-down"></i>
        </div>
        <div class="card-body d-none">${todo.comment}</div>

        <button class="btn-danger remove ">
          <i class="fas fa-times"></i>
        </button>
      `;
    } else {
      card.innerHTML = `
        <div class="card-header d-flex justify-content-between">
          <span>${todo.title}</span>          
        </div>
        <button class="btn-danger remove">
          <i class="fas fa-times"></i>
        </button>
      `;
    } 
    
    list.appendChild(card);  
  }
  
  static ClearInputs() {
    const title = document.querySelector('#title').value = '';
    const comment = document.querySelector('#comment').value = '';
  }
  
  static HandleTodoClick(item) {
    if (item.classList.contains('remove') || item.parentElement.classList.contains('remove')) {
      let parent = findClosest(item, 'card');
      parent.remove();
    } else if (item.classList.contains('card-header') || item.parentElement.classList.contains('card-header')) {
      let card = findClosest(item, 'card');
      let cardBody = card.querySelector('.card-body');
      if (cardBody) {
        cardBody.classList.contains('d-none') 
        ? cardBody.classList.remove('d-none')
        : cardBody.classList.add('d-none');
      }
    }
  }
}

// Storage Class

// Event: Display Todos
document.addEventListener('DOMContentLoaded', UI.DisplayTodos);

// Event: Save Todo
let form = document.querySelector('.todo-form');
form.addEventListener('submit', e => {
  e.preventDefault();
  
  // Get form values
  const title = document.querySelector('#title').value;
  const comment = document.querySelector('#comment').value;
  
  // Initiate todo
  const todo = new Todo(title, comment);  
  // Show todo
  UI.ShowTodo(todo);
  
  // Clear inputs values
  UI.ClearInputs();
});

// Event: Show details

// Event: Remove Todo
let list = document.querySelector('.todos');
list.addEventListener('click', e => {
  UI.HandleTodoClick(e.target);
});

// Get closest parent element with class
// https://stackoverflow.com/a/22119674
function findClosest(el, cls) {
    while ((el = el.parentElement) && !el.classList.contains(cls));
    return el;
}